import org.jpos.iso.ISOException;
import org.jpos.iso.ISOMsg;
import org.jpos.iso.ISOUtil;

import org.jpos.iso.ISODate;

import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import org.omg.CORBA.portable.OutputStream;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;


String fillZerosLeft(String field11) {

	String p11 = "";

	// Rellenar de ceros a la izquierda el campo 11
	while (field11.length() < 6) field11 = "0" + field11;
	
	p11 = field11;
	
	return p11;
	
}

String getField37() {

	Random random = new Random();
	int p37 = random.nextInt((999999 - 100000) + 1) + 100000;
	return Integer.toString(p37);
	
}

String getField11() {

	String zerosP11 = "";
	int p11;
	Properties properties = new Properties();
	InputStream is = null;
	is = new FileInputStream("Kubo/TraceID.properties");

	// Se cargan propiedades de archivo
	properties.load(is);
	p11 = Integer.parseInt(properties.getProperty("campo11")); 
	String field11 = Integer.toString(p11);
	
	//Sobre-escribir archivo de propiedades para campo 11 (traceID)
	FileOutputStream os = new FileOutputStream("Kubo/TraceID.properties");
	properties.setProperty("campo11", Integer.toString(p11 + 1));
	properties.store(os, "Actualizado:");
	
	zerosP11 = fillZerosLeft(field11);
	
	return zerosP11;

}

void setField15And17() {

	if(message.getString(15) != null) {
		message.set(15, ISODate.getDate(new Date()));
	}
	
	if(message.getString(17) != null) {
		message.set(17, ISODate.getDate(new Date()));
	}
	
}

void replaceField60() {
	
	if (message.getString(60) != null) {
		String field60 = message.getString(60);
		field60 = field60.replace('@','&');
		field60 = field60.replace('*','+');
		message.set(60, field60);
	}
	
}

void replaceField126() {
	
	if (message.getString(126) != null) {
		String field126 = message.getString(126);
		field126 = field126.replace('@','&');
		message.set(126, field126);
	}

}

void replaceField63() {
	
	if (message.getString(63) != null) {
		String field63 = message.getString(63);
		field63 = field63.replace('@','&');
		message.set(63,field63);
	}
	
}

void addCvv2TokenC0(String cvv2) {
	
	
	String p63 = message.getString(63);
	StringBuilder p63Build = new StringBuilder(p63);
	StringBuilder cvv2Build = new StringBuilder(cvv2);
	String p63Aux = message.getString(63);
	String token = "";
	int pos = -1;
	int posAux = 0;
	char caracterBuscar = 0x21;
	int i = 0;
	boolean isTokenC0 = false;
	
	pos = p63Aux.indexOf(caracterBuscar); // !
	posAux = posAux + pos;
	
	while(pos > -1) {
		
		token = p63.substring(posAux, posAux + 4);
		
		if(token.equals("! C0")) {
			isTokenC0 = true;
			break;
		}
		else {
			p63Aux = p63Aux.substring(p63Aux.indexOf(caracterBuscar) + 1, p63Aux.length());
			pos = p63Aux.indexOf(caracterBuscar);
			posAux = posAux + pos + 1;
		}
		
		isTokenC0 = false;
	}

	if(isTokenC0) {
	
	String indCVV2 = p63Build.substring(posAux + 31, posAux + 32);
	
		if(indCVV2.equals("1")) { // CVV2 Presente
			p63Build.setCharAt(posAux + 10, cvv2Build.charAt(0));
			p63Build.setCharAt(posAux + 11, cvv2Build.charAt(1));
			p63Build.setCharAt(posAux + 12, cvv2Build.charAt(2));
		}
		else {
			p63Build.setCharAt(posAux + 10, ' ');
			p63Build.setCharAt(posAux + 11, ' ');
			p63Build.setCharAt(posAux + 12, ' ');
		}
		
		
		message.set(63, p63Build.toString());
	}
}

String connectioAPI(String urlAPI) {

	try {
							
		URL url = new URL(urlAPI);
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		conn.setRequestMethod("GET");
		conn.setRequestProperty("Accept", "application/json");
		if (conn.getResponseCode() != 200) {
			throw new RuntimeException("Failed : HTTP Error code : "
					+ conn.getResponseCode());
		}
		InputStreamReader in = new InputStreamReader(conn.getInputStream());
		BufferedReader br = new BufferedReader(in);
		String output;
		String json = "";
		while ((output = br.readLine()) != null) {
			json = output;
		}
		conn.disconnect();
		
		return json;

	} catch (Exception e) {
		evt.addMessage("Exception in NetClientGet:- " + e);
	}

}

void setCVV2(String typeTx) {
	
		// Compra POS
		if (typeTx.equals("00")) {
			
		// Consumir servicio para calcular el CVV2 dinámico

			String urlCVV2 = "http://172.20.1.30:2065/api/dinamiccvv2/" + message.getString(35).substring(0, 16) + '/' + message.getString(35).substring(17, 21) + "/Novo_CVV/HSM_TCS_ZEK/";
						
			String json = connectioAPI(urlCVV2);
			
			JSONParser parser = new JSONParser();
			String cvv2 = (String) parser.parse(json).get("dcvv2").get("data").get("dCvv2");
			addCvv2TokenC0(cvv2);	
		}
}

void setPIN(String typeTx) {

		// Retiro ATM
		if (typeTx.equals("01") || typeTx.equals("31")) {
			
		// Consumir servicio para calcular el CVV2 dinámico
		
			String urlPIN = "http://172.20.1.30:2023/api/pinblock/" + message.getString(52) + '/' + message.getString(35).substring(0, 16) + "/PROSA_KWP";
						
			String json = connectioAPI(urlPIN);
			JSONParser parser = new JSONParser();
			String PIN = (String) parser.parse(json).get("data").get("pinblock");
			message.set(52, PIN);	
		}
}

void getFieldTxOrigin(String typeTx) {

		Properties getProperties();
		Properties properties = new Properties();
		InputStream is = null;
		is = new FileInputStream("Kubo/financial/" + "001000" + "_financial.properties");
		properties.load(is);

	// Anulacion - Cancelacion
	if (typeTx.equals("02") || typeTx.equals("20")) {
		
		message.set(22, properties.getProperty("P22"));
		message.set(38, properties.getProperty("P38"));
		message.set(63, properties.getProperty("P63"));
		message.set(90, properties.getProperty("P0").substring(properties.getProperty("P0").length() - 4) + properties.getProperty("P37") + properties.getProperty("P13") + properties.getProperty("P12") + "00" + properties.getProperty("P13") + "0000000000");
	}
	
	// CheckOut
	if (typeTx.equals("00")) {
		
		message.set(38, properties.getProperty("P38"));
	}
	
}

Properties getFileFinancial() {

	// Cargar información de archivos financial
	Properties getProperties();
	Properties properties = new Properties();
	InputStream is = null;
	is = new FileInputStream("Kubo/financial/" + message.getString(3) + "_financial.properties");
	properties.load(is);
	Vector orderPropertiesVector = new Vector();
	Enumeration e = properties.keys();
	
	while (e.hasMoreElements()) {
		Object obj = e.nextElement();
		orderPropertiesVector.add(Integer.parseInt(obj.toString().substring(1, obj.toString().length())));
	}

	Collections.sort(orderPropertiesVector);

	int i = 1;

	while (i < orderPropertiesVector.size()) {
		String fieldProperties = "";
		if (orderPropertiesVector.elementAt(i) < 64) {
			fieldProperties = "P" + orderPropertiesVector.elementAt(i);
		} else {
			fieldProperties = "S" + orderPropertiesVector.elementAt(i);
		}
		if (properties.getProperty(fieldProperties) != null) {
			message.set (orderPropertiesVector.elementAt(i), properties.getProperty(fieldProperties));
			}
		i++;
	}
	
	return properties;
}


void setTypeTransaction(String MTI, String posATM, String typeTx, String field11, String field37) {

	switch (MTI){
	
		case "0800":
			message.set(7, ISODate.getDateTime (new Date(),TimeZone.getTimeZone("GMT")));
			message.set(11, field11);
			break;
			
		case "0200":
				
			message.set(7, ISODate.getDateTime (new Date(), TimeZone.getTimeZone("GMT")));
			message.set(11, field11);
			message.set(12, ISODate.getTime(new Date()));
			message.set(13, ISODate.getDate(new Date()));
			setField15And17();
			message.set(37, field37 + message.getString(12));
			replaceField60();
					
			if(posATM.equals("02")){ //POS
				replaceField63();
				setCVV2(typeTx);
			}
			
			if(posATM.equals("01")){ //ATM {
				replaceField126();
				if(message.getString(52) != null) {
					setPIN(typeTx);
				}
			}
			
			
			break;
		
		case "0220":
			
			message.set(7, ISODate.getDateTime (new Date(), TimeZone.getTimeZone("GMT")));
			message.set(11, field11);
			message.set(12, ISODate.getTime(new Date()));
			message.set(13, ISODate.getDate(new Date()));
			setField15And17();
			message.set(37, field37 + message.getString(12));
			replaceField60();
			getFieldTxOrigin(typeTx);
			
			break;
		
		case "0420":
		
			//String amount = message.getString(4);
			Properties getProperties();
			Properties properties = new Properties();
			properties = getFileFinancial();
			
			setField15And17();
			
			
			if(posATM.equals("01")) { //ATM
			
				//message.set(4, amount);
				message.set(7, ISODate.getDateTime (new Date(), TimeZone.getTimeZone("GMT")));
				message.set(11, field11);
				message.set(12, ISODate.getTime(new Date()));
				message.set(13, ISODate.getDate(new Date()));
				message.set(22, properties.getProperty("P22"));
				message.set(48, null);
				message.set(63, properties.getProperty("P63"));
				message.set(90, properties.getProperty("P0").substring(properties.getProperty("P0").length() - 4) + properties.getProperty("P37") + properties.getProperty("P13") + properties.getProperty("P12") + "00" + properties.getProperty("P13") + "0000000000");
			}
			
			if(posATM.equals("02")) { //POS
			
				//message.set(4, amount);
				message.set(7, ISODate.getDateTime (new Date(), TimeZone.getTimeZone("GMT")));
				message.set(11, field11);
				message.set(12, ISODate.getTime(new Date()));
				message.set(13, ISODate.getDate(new Date()));
				message.set(22, properties.getProperty("P22"));
				message.set(63, properties.getProperty("P63"));
				message.set(90, properties.getProperty("P0").substring(properties.getProperty("P0").length() - 4) + properties.getProperty("P37") + properties.getProperty("P13") + properties.getProperty("P12") + "00" + properties.getProperty("P13") + "0000000000");
			}
	
		break;
		
	}

}


void setFileFinancial(String MTI) {
	
	// Crear archivo Financial
	String fileRevese = "";

	if (message.getString(1) == null) {
		message.set(1, "00");
	}

	if ((MTI.equals("0200") || MTI.equals("0220")) && "00".equals(message.getString(1))) {

		Vector fieldFinancial = new Vector();
		
		for (int i=0; i < 129; i++) {
			if (message.getString(i) != null) {
				if (i <= 64) {
					fieldFinancial.add("P" + Integer.toString(i) + "=" + message.getString(i));
				}
				else {
					fieldFinancial.add("S" + Integer.toString(i) + "=" + message.getString(i));
				}
			}
		}
		
		fileRevese = "Kubo/financial/" + message.getString(3) + "_financial.properties";
		
		BufferedWriter bw = new BufferedWriter(new FileWriter(fileRevese));
		
		int i = 0;
		
		while (i < fieldFinancial.size()) {
			bw.write(fieldFinancial.elementAt(i) + "\n");
			i += 1;
		}
		
		bw.close();			
	}
}

void calculateDataAscii(String MTI) {

	Vector fieldPrinter = new Vector();
	String ascciData = "";
	String bitmapbit = "";
	String indicatorField = "";
	String length = "";
	String bitmap = "";
	int lengthIndicator = 0;


	for (int i = 0; i < 129; i++){
		if (i <= 64) {
			indicatorField = "P";
		} else {
			indicatorField = "S";
		}
		
		if (message.getString(i) != null){
			
			if (i > 0){
				bitmapbit = bitmapbit + "1";
			}
			fieldPrinter.add(indicatorField + Integer.toString(i) + "-> [" + message.getString(i) + "]");
			// Dos primeras posiciones son indicadores de longiud
			if (i == 2 || i == 32 || i == 33 || i == 35 || i == 44 || i == 45 || i == 100 || i == 102 || i == 103 || i == 104){
				length = (message.getString(i).length()).toString();
				lengthIndicator = ((message.getString(i).length()).toString()).length();
				for (int i=0; i < 2 - lengthIndicator; i++) {
					length = "0" + length;
				}
				ascciData = ascciData + length + message.getString(i);
			}
			// Tres primeras posiciones son indicadores de longiud
			else if (i == 46 || i == 47 || i == 48 || i == 54 || i == 58 || i == 59 || i == 60 || i == 61 || i == 62 || i == 63 || i == 106 || i == 106 || i == 107 || i == 120 || i == 121 || i == 123 || i == 124 || i == 125 || i == 126)
				{
					length = (message.getString(i).length()).toString();
					lengthIndicator = ((message.getString(i).length()).toString()).length();
					for (int i=0; i < 3 - lengthIndicator; i++) {
						length = "0" + length;
				}
				ascciData = ascciData + length + message.getString(i);
			}
			// Longitud fija		
			else{
					ascciData = ascciData + message.getString(i);
				}
		} 
		else {
			bitmapbit = bitmapbit + "0";
		}
	}

	bitmap = calculateDataBitmap(bitmapbit);
	setLog(MTI, fieldPrinter);
	
	ascciData = ascciData.substring(0,16) + bitmap + ascciData.substring(16, ascciData.length());
	evt.addMessage("ASCII Data: " + ascciData);
}

String calculateDataBitmap(String bitmapbit) {

	// Se realiza calculo manual de BITMAP
	int digitNumber = 1;
	int sum = 0;
	String binary = bitmapbit;
	String bitmap = "";
	for (int i = 0; i < binary.length(); i++) {
		if (digitNumber == 1)
			sum += Integer.parseInt(binary.charAt(i) + "") * 8;
		else if (digitNumber == 2)
			sum += Integer.parseInt(binary.charAt(i) + "") * 4;
		else if (digitNumber == 3)
			sum += Integer.parseInt(binary.charAt(i) + "") * 2;
		else if (digitNumber == 4 || i < binary.length() + 1) {
			sum += Integer.parseInt(binary.charAt(i) + "") * 1;
			digitNumber = 0;
			if (sum < 10)
				bitmap = bitmap + String.valueOf(sum);
			// System.out.print(sum);
			else if (sum == 10)
				//System.out.print("A");
				bitmap = bitmap + "A";
			else if (sum == 11)
				//System.out.print("B");
				bitmap = bitmap + "B";
			else if (sum == 12)
				//System.out.print("C");
			bitmap = bitmap + "C";
			else if (sum == 13)
			//	System.out.print("D");
			bitmap = bitmap + "D";
			else if (sum == 14)
				//System.out.print("E");
			bitmap = bitmap + "E";
			else if (sum == 15)
				//System.out.print("F");
			bitmap = bitmap + "F";
			sum = 0;
		}
		digitNumber++;
	}
	
	return bitmap;
	// Fin calculo de BITMAP

}

void setLog(String MTI, Vector fieldPrinter) {

	String file = "";
	boolean isSaveLog = false;

	// Escribir en el archivo Log
	if("08".equals(MTI.substring(0,2))) {
		file = "Kubo/log/Tx_Admin/" + MTI + "_" + message.getString(70) + "_" + message.getString(11) + "_" + message.getString(7) + "_Adqu";
		isSaveLog = false;
	}
	else {
		file = "Kubo/log/Tx_Financial/" + MTI + "_" + message.getString(3) + "_" + message.getString(11) + "_" + message.getString(7).substring(0,4) + "_" + message.getString(7).substring(4,10) + "_" + message.getString(32) + "_Adqu";
		isSaveLog = true;
	}

	
	if(isSaveLog) {
	
		BufferedWriter bwLog = new BufferedWriter(new FileWriter(file));

		/*Escribir archivo de salida de transaccion*/
		int i = 0;

		while (i < fieldPrinter.size()) {
			bwLog.write(fieldPrinter.elementAt(i) + "\n");
			i += 1;
		}

		bwLog.close();
		isSaveLog = false;
	}

}

void main() {
	
	addClassPath( "lib/json-simple-1.1.jar" );
	String field37 = getField37();
	String field11 = getField11();

	// Message Type
	/* 
	08xx - Administrativas
	02xx - Financieras
	04xx - Reversos
	*/
	String MTI = message.getString(0).substring(message.getString(0).length() - 4);

	// Type Product 
	/*
	01 - ATM
	02 - POS 
	*/
	String posATM = message.getString(0).substring(3, 5);

	// Type Transaction
	/* 
	00 - Compra, CheckIn, CheckOut
	01 - Retiro
	02 - Anulacion
	20 - Cancelacion
	*/
	String typeTx = message.getString(3) == null ? null :  message.getString(3).substring(0, 2);
	
	setTypeTransaction(MTI, posATM, typeTx, field11, field37);
	setFileFinancial(MTI);
	calculateDataAscii(MTI);
	
}


main();